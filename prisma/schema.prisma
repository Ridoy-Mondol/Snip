generator client {
    provider        = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = "postgresql://postgres.edduuatujlvepjzkvtau:PtXwkevZSIjsk@aws-0-ap-south-1.pooler.supabase.com:5432/postgres"
    directUrl         = "postgresql://postgres.edduuatujlvepjzkvtau:PtXwkevZSIjsk@aws-0-ap-south-1.pooler.supabase.com:5432/postgres"
    shadowDatabaseUrl = "postgresql://postgres.edduuatujlvepjzkvtau:PtXwkevZSIjsk@aws-0-ap-south-1.pooler.supabase.com:5432/postgres?schema=prisma_shadow"
}

model User {
    id               String         @id @default(uuid())
    apiKey           String?  @default(uuid())
    name             String?        @db.VarChar(50)
    description      String?        @db.VarChar(160)
    location         String?        @db.VarChar(30)
    website          String?        @db.VarChar(30)
    photoUrl         String?
    headerUrl        String?
    username         String         @unique @db.VarChar(20)
    email            String?        @unique @db.VarChar(255)
    password         String?
    isPremium        Boolean        @default(false)
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @default(now()) @updatedAt
    referrerId       String?        @db.VarChar(36)
    referralCode     String?        @unique @db.VarChar(20)
    referralPoints   Int            @default(0)
    referralsMade    Referral[]     @relation("userReferralsMade")
    referralsReceived Referral[]    @relation("userReferralsReceived")
    createdTweets    Tweet[]        @relation("userTweets")
    retweets         Tweet[]        @relation("userRetweets")
    likedTweets      Tweet[]        @relation("userLikes")
    following        User[]         @relation("userFollows")
    followers        User[]         @relation("userFollows")
    sentMessages     Message[]      @relation("userMessagesSent")
    receivedMessages Message[]      @relation("userMessagesRecieved")
    notifications    Notification[]
    blogs            Blog[]         @relation("userBlogs")
    votes     Vote[]    @relation("userVotes")
    sessions         Session[]      @relation("userSessions")
    playerIds String[] @default([])
    subscriptions    Subscription[] @relation("userSubscriptions")
    subscribers      Subscription[] @relation("userSubscribers")
}

model Blog {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(255) 
  content   String? 
  category  String? 
  imageUrl  String?
  status      String   @default("published")
  scheduledAt DateTime?
  createdAt DateTime @default(now())
  author    User     @relation("userBlogs", fields: [authorId], references: [id])
  authorId  String
}


model Tweet {
    id          String   @id @default(uuid())
    text        String?   @db.VarChar(280)
    status      String   @default("published")
    scheduledAt DateTime?
    createdAt   DateTime @default(now())
    author      User     @relation("userTweets", fields: [authorId], references: [id])
    authorId    String
    photoUrl    String?
    likedBy     User[]   @relation("userLikes")
    retweetedBy User[]   @relation("userRetweets")
    replies     Tweet[]  @relation("tweetReplies")
    retweets    Tweet[]  @relation("retweetOf")
    isRetweet   Boolean  @default(false)
    retweetOf   Tweet?   @relation("retweetOf", fields: [retweetOfId], references: [id], onDelete: Cascade)
    retweetOfId String?
    isReply     Boolean  @default(false)
    repliedTo   Tweet?   @relation("tweetReplies", fields: [repliedToId], references: [id], onDelete: Cascade)
    repliedToId String?

    // Poll-specific fields
    isPoll          Boolean  @default(false) 
    pollOptions     PollOption[] // Relation to poll options
    pollExpiresAt   DateTime?
    totalVotes      Int       @default(0)
}

model PollOption {
    id         String   @id @default(uuid())
    text       String   @db.VarChar(100) 
    votes      Int      @default(0)
    tweet      Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
    tweetId    String

    // Relation to votes
    votesForOption Vote[]   @relation("pollOptionVotes")
}

model Vote {
  id          String    @id @default(uuid())
  userId      String
  pollOptionId String
  user         User         @relation("userVotes", fields: [userId], references: [id])
  pollOption   PollOption   @relation("pollOptionVotes", fields: [pollOptionId], references: [id])

  @@unique([userId, pollOptionId])  // Ensures a user can vote only once for each option
}

model Message {
    id          String   @id @default(uuid())
    text        String   @db.VarChar(280)
    createdAt   DateTime @default(now())
    sender      User     @relation("userMessagesSent", fields: [senderId], references: [id])
    senderId    String
    recipient   User     @relation("userMessagesRecieved", fields: [recipientId], references: [id])
    recipientId String
    photoUrl    String?
}

model Notification {
    id        String   @id @default(uuid())
    type      String   @db.VarChar(20)
    content   String
    createdAt DateTime @default(now())
    isRead    Boolean  @default(false)
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

model Subscription {
    id             String   @id @default(uuid())
    subscriber     User     @relation("userSubscriptions", fields: [subscriberId], references: [id])
    subscriberId   String
    subscribedTo   User     @relation("userSubscribers", fields: [subscribedToId], references: [id])
    subscribedToId String
    createdAt      DateTime @default(now())

    @@unique([subscriberId, subscribedToId])
}

model Session {
    id         String   @id @default(uuid())
    user       User     @relation("userSessions", fields: [userId], references: [id])
    userId     String
    token      String?
    device     String   @db.VarChar(255)  // e.g., "iPhone", "Windows PC"
    browser    String   @db.VarChar(255)  // e.g., "Chrome", "Firefox"
    ipAddress  String   @db.VarChar(50)   // IP Address
    createdAt  DateTime @default(now())   // Session start time
    updatedAt  DateTime @default(now()) @updatedAt // Last updated time
}

model Referral {
    id             String   @id @default(uuid())
    referrerId     String   @db.VarChar(36)
    referredUserId String  @db.VarChar(36)
    createdAt      DateTime @default(now())
    
    referrer       User     @relation("userReferralsMade", fields: [referrerId], references: [id])
    referredUser   User?    @relation("userReferralsReceived", fields: [referredUserId], references: [id])
}
